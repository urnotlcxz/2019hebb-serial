#include<stdafx.h>
// 全连接RNN.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。

#include<stdio.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>

#define NUM_NEURAL_INPUT 2
#define NUM_NEURAL_HIDDEN 2
#define NUM_NEURAL_OUTPUT 1
#define EPOCH 1
#define THREAD_EPOCH 3
#define STEPS 10
#define DIMENSION 2
#define MUTATION_P  0.03
#define CROSS_P 0.7
#define PER_BENCHMARK_TIMES 3 
#define NUM_BENCHMARK 10
#define NUM_NEURAL_NETWORK (DIMENSION*PER_BENCHMARK_TIMES*NUM_BENCHMARK)  //每一个染色体上进行的神经网络
#define PI 3.1415926535897932384626433832795029
#define E 2.7182818284590452353602874713526625
#define SINGLE_WEIGHT (NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT)*(NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT - 1)
#define MAX 100
#define MIN -100
#define BLOCK 8
#define THREAD 100
#define NUM_CHROMO  2//(BLOCK*THREAD/(NUM_BENCHMARK*PER_BENCHMARK_TIMES))
#define G 0.002
#define DELTA_W_MAX 0.003
#define DELTA_W_MIN -0.003
#define DELTA_X_MAX 0.1
#define DELTA_X_MIN -0.1

struct NN
{
	float w[SINGLE_WEIGHT];
	float b[SINGLE_WEIGHT];
	float old_neural[NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT];
	float new_neural[NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT];
	int num_input;
	int num_output;
};

struct CHROMO
{
	NN nn_initial;
	NN nn[PER_BENCHMARK_TIMES*NUM_BENCHMARK][DIMENSION];
	float a[NUM_BENCHMARK*PER_BENCHMARK_TIMES], b[NUM_BENCHMARK*PER_BENCHMARK_TIMES], c[NUM_BENCHMARK*PER_BENCHMARK_TIMES], d[NUM_BENCHMARK*PER_BENCHMARK_TIMES];
	float A, B, C, D;
	float initial_position[NUM_BENCHMARK*PER_BENCHMARK_TIMES][DIMENSION];
	float position[NUM_BENCHMARK*PER_BENCHMARK_TIMES][DIMENSION];
};

struct IN_FITNESS
{
	float f[THREAD_EPOCH];
};

float hebb(float a, float b, float c, float d, float x, float y)
{
	return G * (a*x + b * y + c * x*y + d);
}

float sigmoid(float x)
{
	if (x < -80)
		return 0;
	else if (x > 80)
		return 1;
	else
		return 1.0F / (1.0F + exp(-1 * x));
}

void initial_chromo(struct CHROMO chromo[NUM_CHROMO])
{
	time_t tttt;
	srand((unsigned int)time(&tttt));
	int t = 0, i = 0, j = 0, k = 0;
	for (i = 0; i < NUM_CHROMO; i++)
	{
		for (int num_fun = 0; num_fun < NUM_BENCHMARK*PER_BENCHMARK_TIMES; num_fun++)
		{
			for (j = 0; j < DIMENSION; j++)
			{
				for (t = 0; t < SINGLE_WEIGHT; t++)
				{
					if (num_fun == 0 && j == 0)
					{
						chromo[i].nn[num_fun][j].w[t] = (float)rand() / RAND_MAX * 2 - 1;
						chromo[i].nn[num_fun][j].b[t] = (float)rand() / RAND_MAX * 2 - 1;
						chromo[i].nn_initial.b[t] = chromo[i].nn[num_fun][j].b[t];
						chromo[i].nn_initial.w[t] = chromo[i].nn[num_fun][j].w[t];
					}
					else
					{
						chromo[i].nn[num_fun][j].w[t] = chromo[i].nn_initial.w[t];
						chromo[i].nn[num_fun][j].b[t] = chromo[i].nn_initial.b[t];
					}
				}
				chromo[i].nn[num_fun][j].num_input = 2;
				chromo[i].nn[num_fun][j].num_output = 1;
				chromo[i].initial_position[num_fun][j] = (float)rand() / RAND_MAX * (MAX - MIN) - MAX;
				chromo[i].position[num_fun][j] = chromo[i].initial_position[num_fun][j];
				for (k = 0; k < NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT; k++)
				{
					chromo[i].nn[num_fun][j].old_neural[k] = 0.5;
					chromo[i].nn[num_fun][j].new_neural[k] = 0.0;
				}
			}
			if (num_fun == 0)
			{
				chromo[i].a[num_fun] = (float)rand() / RAND_MAX * 2 - 1;
				chromo[i].b[num_fun] = (float)rand() / RAND_MAX * 2 - 1;
				chromo[i].c[num_fun] = (float)rand() / RAND_MAX * 2 - 1;
				chromo[i].d[num_fun] = (float)rand() / RAND_MAX * 2 - 1;
			}
			else
			{
				chromo[i].a[num_fun] = chromo[i].a[0];
				chromo[i].b[num_fun] = chromo[i].b[0];
				chromo[i].c[num_fun] = chromo[i].c[0];
				chromo[i].d[num_fun] = chromo[i].d[0];
			}
		}
		chromo[i].A = chromo[i].a[0];
		chromo[i].B = chromo[i].b[0];
		chromo[i].C = chromo[i].c[0];
		chromo[i].D = chromo[i].d[0];
	}
}

void  nn_forward_and_update_paramenter(struct CHROMO ch[], int num, float f, int num_fun3, int num_epoch)  ////
{
	FILE *f_old_neural, *f_new_neural, *f_delta_w, *f_old_w, *f_new_w, *f_old_b, *f_new_b;
	if ((f_old_neural = fopen("d:\\test\\f_old_neural.txt", "w")) == NULL) {
		printf("Cannot open the file,strike any key to exit!\n");
		getchar();
		exit(0);
	}  
	if ((f_new_neural = fopen("d:\\test\\f_new_neural.txt", "w")) == NULL) {
		printf("Cannot open the file,strike any key to exit!\n");
		getchar();
		exit(0);
	}  
	if ((f_delta_w = fopen("d:\\test\\f_delta_w.txt", "w")) == NULL) {
		printf("Cannot open the file,strike any key to exit!\n");
		getchar();
		exit(0);
	}  
	if ((f_old_w = fopen("d:\\test\\f_old_w.txt", "w")) == NULL) {
		printf("Cannot open the file,strike any key to exit!\n");
		getchar();
		exit(0);
	}  
	if ((f_new_w = fopen("d:\\test\\f_new_w.txt", "w")) == NULL) {
		printf("Cannot open the file,strike any key to exit!\n");
		getchar();
		exit(0);
	}
	if ((f_new_b = fopen("d:\\test\\f_new_b.txt", "w")) == NULL) {
		printf("Cannot open the file,strike any key to exit!\n");
		getchar();
		exit(0);
	}
	if ((f_old_b = fopen("d:\\test\\f_old_b.txt", "w")) == NULL) {
		printf("Cannot open the file,strike any key to exit!\n");
		getchar();
		exit(0);
	}
	int i, j, k;
	int t = 0;
	for(i=0;i<DIMENSION;i++)
	{
		printf("D: %d  position:%f\n", i, ch[num].position[num_fun3][i]);
	}
	for (i = 0; i < DIMENSION; i++)
	{
		fprintf(f_old_w, "DIMENSION:%d\n\n", i);
		fprintf(f_old_b, "DIMENSION:%d\n\n", i);
		for (j = 0; j < SINGLE_WEIGHT; j++)
		{
			if(j%4==0)
			{
				fprintf(f_old_w, "\n\n");
				fprintf(f_old_b, "\n\n");
			}
			fprintf(f_old_w, "%f\n", ch[num].nn[num_fun3][i].w[j]);
			fprintf(f_old_b, "%f\n", ch[num].nn[num_fun3][i].b[j]);
			
		}
	}
	for (k = 0; k < DIMENSION; k++)
	{
		ch[num].nn[num_fun3][k].old_neural[0] = f / num_epoch;
		ch[num].nn[num_fun3][k].old_neural[1] = ch[num].position[num_fun3][k] / MAX;
	}
	for (i = 0; i < DIMENSION; i++)
	{
		fprintf(f_old_neural, "DIMENSION:%d\n\n",i);
		for (int j = 0; j < 5; j++)
		{
			fprintf(f_old_neural, "%f\n", ch[num].nn[num_fun3][i].old_neural[j]);
		}
	}
	for (k = 0; k < DIMENSION; k++)						//前向传递
	{
		t = 0;
		for (i = 0; i < NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT; i++)
		{
			for (j = 0; j < NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT; j++)
			{
				if (i != j)
				{
					ch[num].nn[num_fun3][k].new_neural[i] += (ch[num].nn[num_fun3][k].w[t] * ch[num].nn[num_fun3][k].old_neural[j] + ch[num].nn[num_fun3][k].b[t]);
					t++;
				}
			}
			//printf("dimension %d,neural %d:%f\n",k, i, ch[num].nn[num_fun3][k].new_neural[i]);
			ch[num].nn[num_fun3][k].new_neural[i] = (ch[num].nn[num_fun3][k].new_neural[i] + ch[num].nn[num_fun3][k].old_neural[i]);
			fprintf(f_new_neural, "%f\n", ch[num].nn[num_fun3][k].new_neural[i]);
		}
		fprintf(f_new_neural, "DIMENSION:%d\n\n", k);
		//printf("\n");		
	}
	float w[DIMENSION][SINGLE_WEIGHT];
	float delta_w[SINGLE_WEIGHT];
	for (int i = 0; i < SINGLE_WEIGHT; i++)
	{
		delta_w[i] = 0;
	}
	for (k = 0; k < DIMENSION; k++)
	{
		t = 0;
		fprintf(f_delta_w, "DIMENSION:%d\n\n", k);
		for (i = 0; i < NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT; i++)
		{
			for (j = 0; j < NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT; j++)
			{
				if (i != j)
				{
					w[k][t] = hebb(ch[num].a[num_fun3], ch[num].b[num_fun3], ch[num].c[num_fun3], ch[num].d[num_fun3], ch[num].nn[num_fun3][k].old_neural[j], ch[num].nn[num_fun3][k].old_neural[i]);
					/*if (w[k][t] > DELTA_W_MAX)
					{
						w[k][t] = DELTA_W_MAX;
					}
					if (w[k][t] < DELTA_X_MIN)
					{
						w[k][t] = DELTA_W_MIN;
					}*/
					fprintf(f_delta_w, "%f\n", w[k][t]);
					t++;
				}
			}
			fprintf(f_delta_w, "\n\n");
		}

	}
	for (int i = 0; i < SINGLE_WEIGHT; i++)
	{
		for (int j = 0; j < DIMENSION; j++)
		{
			delta_w[i] += w[j][i];
		}
	}
	for (k = 0; k < DIMENSION; k++)
	{
		t = 0;
		fprintf(f_new_w, "DIMENSION:%d\n\n", k);
		for (i = 0; i < NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT; i++)
		{
			for (j = 0; j < NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT; j++)
			{
				if (i != j)
				{
					ch[num].nn[num_fun3][k].w[t] += delta_w[t];
					ch[num].nn[num_fun3][k].b[t] += delta_w[t];
					fprintf(f_new_w, "%f\n", ch[num].nn[num_fun3][k].w[t]);
					fprintf(f_new_b, "%f\n", ch[num].nn[num_fun3][k].b[t]);
					t++;
				}
			}
		}
	}
	for (k = 0; k < DIMENSION; k++)
	{
		for (i = 0; i < NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT; i++)
		{
			ch[num].nn[num_fun3][k].old_neural[i] = ch[num].nn[num_fun3][k].new_neural[i];
			ch[num].nn[num_fun3][k].new_neural[i] = 0;
		}
		//printf("neural[%d] in function:%f\n", k, ch[num].nn[num_fun3][k].old_neural[NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT - 1]);
	}
	fclose(f_old_neural);
	fclose(f_new_neural);
	fclose(f_new_w);
	fclose(f_old_w);
	fclose(f_delta_w);
	fclose(f_old_b);
	fclose(f_new_b);
}

int main()
{
	CHROMO ch[2];
	initial_chromo(ch);
	for (int t = 0; t < EPOCH; t++)
	{
		for (int i = 0; i < STEPS; i++)
		{
			nn_forward_and_update_paramenter(ch, 0, 1, 0, 1);
		}
		for(int i=0;i<DIMENSION;i++)
		{
			ch[0].position[0][i]+=(ch[0].nn[0][i].old_neural[NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT-1]*(DELTA_X_MAX-DELTA_X_MIN)-DELTA_X_MAX)*MAX;
		}
		for (int i = 0; i < DIMENSION; i++)
		{
			ch[0].position[0][i] += ch[0].nn[0][i].old_neural[4];
			printf("ch[0].position[0][i]:%f  \n", ch[0].position[0][i]);
		}
	}
}
