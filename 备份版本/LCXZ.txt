// test_module.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>

#define NUM_NEURAL_INPUT 2
#define NUM_NEURAL_HIDDEN 2
#define NUM_NEURAL_OUTPUT 1
#define EPOCH 200
#define NUM_CHROMO 100
#define STEPS 10;
#define DIMENSION 2
#define MUTATION_P  0.03
#define CROSS_P 0.9
#define PER_BENCHMARK_TIMES 3
#define NUM_BENCHMARK 10
#define NUM_NEURAL_NETWORK (DIMENSION*PER_BENCHMARK_TIMES*NUM_BENCHMARK)  //每一个染色体上进行的神经网络
#define MY_THREAD 1024
#define PI 3.1415926535897932384626433832795029
#define E 2.7182818284590452353602874713526625
#define SINGLE_WEIGHT (NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT)*(NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT - 1)

struct NN
{
	float w[(NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT)*(NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT - 1)];
	float b[(NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT)*(NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT - 1)];
	float old_neural[NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT];
	float new_neural[NUM_NEURAL_HIDDEN + NUM_NEURAL_INPUT + NUM_NEURAL_OUTPUT];
	int num_input;
	int num_output;
};

struct CHROMO
{
	NN nn_initial[DIMENSION];
	NN nn[DIMENSION];
	float A, B, C, D;
	float f;
};

void swap(float *a, float *b)
{
	float temp;
	temp = *a;
	*a = *b;
	*b = temp;
}
void swap2(int *a, int *b)  //交换下标索引
{
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;
}
void adjust(float* arr, int idx1, int idx2, int* b)
{
	int idx;
	if (NULL == arr || idx1 >= idx2 || idx1 < 0 || idx2 < 0)
		return;
	float tmp = arr[idx1];
	float temp2 = b[idx1];
	for (idx = idx1 * 2 + 1; idx <= idx2; idx = idx * 2 + 1)
	{
		if (idx + 1 <= idx2 && arr[idx] < arr[idx + 1])
			++idx;
		if (arr[idx] > tmp)
		{
			arr[idx1] = arr[idx];
			b[idx1] = b[idx];
			idx1 = idx;
		}
		else
			break;
	}
	arr[idx1] = tmp;
	b[idx1] = temp2;
}
float heapSort(float* arr, int length, int* b)
{
	int idx;
	if (NULL == arr || length <= 0)
		return -1;
	for (idx = length / 2 - 1; idx >= 0; --idx)
	{
		adjust(arr, idx, length - 1, b);
	}
	for (idx = length - 1; idx > 0; --idx)
	{
		swap(&arr[0], &arr[idx]);
		swap2(&b[0], &b[idx]);
		adjust(arr, 0, idx - 1, b);
	}
	return 0;
}
//锦标赛选择
void selection_tournment(struct CHROMO ch[NUM_CHROMO], float GA_Fitness[NUM_CHROMO], int g)
{
	int m;
	m = NUM_CHROMO;
	int sel_num, sel_init, sel_final;
	sel_init = floor(NUM_CHROMO*0.15);
	sel_final = floor(NUM_CHROMO*0.666);
	sel_num = (int)(floor)(sel_final - sel_init) / (float)EPOCH*g + sel_init;

	int *select;
	select = (int(*))malloc(sel_num * sizeof(int));
	int mark2[NUM_CHROMO] = { 0 };//标记个体有没有被选中
	int index[NUM_CHROMO] = { 0 };//
	float min;
	int maxindex;
	int i, j, d,l, n, k;

	for (i = 0; i < m; i++)			// m = CHROMOSOME_NUM
	{
		for (j = 0; j < sel_num; j++)
		{
			int r2 = rand() % m + 1;   //1-m之间哪个个体（整数）
			while (mark2[r2 - 1] == 1)
			{
				r2 = rand() % m + 1;
			}
			mark2[r2 - 1] = 1;
			select[j] = r2 - 1;
		}
		min = GA_Fitness[select[0]];
		maxindex = select[0];
		for (k = 1; k < sel_num; k++)
		{
			if (GA_Fitness[select[k]] < min)
			{
				min = GA_Fitness[select[k]];
				maxindex = select[k];
			}
		}
		index[i] = maxindex;
		for (n = 0; n < NUM_CHROMO; n++)
		{
			mark2[n] = 0;
		}

		for (n = 0; n < sel_num; n++)
		{
			select[n] = 0;
		}

		for ( d = 0; d < DIMENSION; d++)
		{
			for (l = 0; l < SINGLE_WEIGHT; l++)
			{
				ch[i].nn_initial[d].w[l] = ch[index[i]].nn_initial[d].w[l];
				ch[i].nn_initial[d].b[l] = ch[index[i]].nn_initial[d].b[l];
			}
		}
		ch[i].A = ch[index[i]].A;
		ch[i].B = ch[index[i]].B;
		ch[i].C = ch[index[i]].C;
		ch[i].D = ch[index[i]].D;
		
	}
	free(select);

} 
//交叉
void crossover(struct CHROMO ch[NUM_CHROMO])
{
	//const double a = 0.0;
	//const double b = 1.0;
	int two;
	int one;
	int first = 0;
	float r, r2;
	int point;
	float t;
	int i,d;

	for (two = 0; two < NUM_CHROMO; two++)
	{
		r = rand() / (RAND_MAX + 1.0);
		if (r < CROSS_P)
		{
			++first;
			if (first % 2 == 0)//交叉
			{
				//point = rand() % TOTAL_WEIGHT + 1;  //随机选择交叉点
				for ( d = 0; i < DIMENSION; i++)
				{
					for (i = 0; i < SINGLE_WEIGHT; i++)
					{
						r2 = rand() / (RAND_MAX + 1.0);
						if (r2 < 0.5)
						{
							t = ch[one].nn_initial[d].w[i];
							ch[one].nn_initial[d].w[i] = ch[two].nn_initial[d].w[i];
						    ch[two].nn_initial[d].w[i] = t;
						}
					}
					for (i = 0; i < SINGLE_WEIGHT; i++)
					{
						r2 = rand() / (RAND_MAX + 1.0);
						if (r2 < 0.5)
						{
							t = ch[one].nn_initial[d].b[i];
							ch[one].nn_initial[d].b[i] = ch[two].nn_initial[d].b[i];
							ch[two].nn_initial[d].b[i] = t;
						}
					}
				}
				r2 = rand() / (RAND_MAX + 1.0);
				if (r2 < 0.5)
				{
					ch[one].A = ch[two].A;
				}
				r2 = rand() / (RAND_MAX + 1.0);
				if (r2 < 0.5)
				{
					ch[one].B = ch[two].B;
				}
				r2 = rand() / (RAND_MAX + 1.0);
				if (r2 < 0.5)
				{
					ch[one].C = ch[two].C;
				}
				r2 = rand() / (RAND_MAX + 1.0);
				if (r2 < 0.5)
				{
					ch[one].D = ch[two].D;
				}
				
			}
			else
			{
				one = two;
			}
		}
	}
}
//变异
void mutation(struct CHROMO ch[NUM_CHROMO])
{
	float r;
	int i, j,d;

	for (i = 0; i < NUM_CHROMO; i++)
	{
		for (d = 0; i < DIMENSION; i++)
		{
			for (j = 0; j < SINGLE_WEIGHT; j++)
			{
				r = rand() / (RAND_MAX + 1.0);
				if (r < MUTATION_P)
				{
					ch[i].nn_initial[d].w[j] = (float)rand() / RAND_MAX * 2.0 - 1.0;
					ch[i].nn_initial[d].b[j] = (float)rand() / RAND_MAX * 2.0 - 1.0;
				}
			}
		}
	}
}
int main()
{
	int g,i,j,k,fun_num;
	int temp_nn_index[NUM_CHROMO];//下标
	float nn_fitness[NUM_CHROMO][NUM_BENCHMARK];  //实际通过cec计算得出的适应值
	float nn_fitness_one_f[NUM_CHROMO];//所有染色体在同一个函数上的排序
	float temp_compare[NUM_CHROMO];
	int record_sort_index[NUM_CHROMO];   //1个函数下的NUM_CHROMO个排名名次
	float record_nn_fitness_sort_index[NUM_CHROMO][NUM_BENCHMARK + 1];  //10个函数下的CHROMOSOME_NUM个NN 名次
	float GA_fitness[NUM_CHROMO];
	struct CHROMO ch[NUM_CHROMO];
	struct CHROMO GA_best_ch;
	struct CHROMO gbest_ch;
	float GA_fitness[NUM_CHROMO];
	float min_fit[EPOCH];
	float the_min_fit_inallG = NUM_CHROMO;
	char fileName[256];
	int record_g = 0;
	FILE* fp = fopen("GA100results.txt", "a");
	FILE* fw = fopen("GA100bestch.txt", "a");

	if (fp == NULL || fw == NULL)
	{
		printf("failed to open f file\n");
		system("pause");
	}
	srand((unsigned)time(NULL));

	for ( g = 0; g < EPOCH; g++)
	{
		FILE* f_temp_ch = fopen("temp_bestch.txt", "a");
		FILE* f_temp_result = fopen("temp_result.txt", "a");
		FILE* a_generation_ch[NUM_CHROMO + 1];


		//10个函数
		for (fun_num = 0; fun_num < NUM_BENCHMARK; fun_num++)
		{
			for (i = 0; i < NUM_CHROMO; i++)
			{
				nn_fitness_one_f[i] = nn_fitness[i][fun_num];
				temp_compare[i] = nn_fitness[i][fun_num];
				temp_nn_index[i] = i;
			}
			k = 0;

			heapSort(nn_fitness_one_f, NUM_CHROMO, temp_nn_index);

			for (i = 0; i < NUM_CHROMO; i++)
			{
				record_sort_index[temp_nn_index[i]] = i;
			}

			for (i = 0; i < NUM_CHROMO; i++)
			{
				record_nn_fitness_sort_index[i][fun_num] = (float)record_sort_index[i]; //NUM_CHROMO * NUM_BENCHMARK个名次
			}
		}

		//平均排名
		for (i = 0; i < NUM_CHROMO; i++)   
		{
			float sum = 0;
			for (j = 0; j < NUM_BENCHMARK; j++)
			{
				sum += record_nn_fitness_sort_index[i][j];
			}
			record_nn_fitness_sort_index[i][NUM_BENCHMARK] = sum / (double)NUM_BENCHMARK;
			GA_fitness[i] = sum / (double)NUM_BENCHMARK;
			printf("the %dth chromosome in all function's avg ranking is :%lf \n", i + 1, GA_fitness[i]);
		}
		min_fit[g] = GA_fitness[0];     //找最小排名及对应的网络
		for (i = 1; i < NUM_CHROMO; i++)
		{
			if (GA_fitness[i] < min_fit[g])
			{
				min_fit[g] = GA_fitness[i];
				for ( k = 0; k < DIMENSION; k++)
				{
					for (j = 0; j < SINGLE_WEIGHT; j++)
					{
						GA_best_ch.nn_initial[k].w[j] = ch[i].nn_initial[k].w[j];
						GA_best_ch.nn_initial[k].b[j] = ch[i].nn_initial[k].b[j];
					}
				}	
				GA_best_ch.A = ch[i].A;
				GA_best_ch.B = ch[i].B;
				GA_best_ch.C = ch[i].C;
				GA_best_ch.D = ch[i].D;
			}
			else
			{
				for (k = 0; k < DIMENSION; k++)
				{
					for (j = 0; j < SINGLE_WEIGHT; j++)
					{
						GA_best_ch.nn_initial[k].w[j] = ch[0].nn_initial[k].w[j];
						GA_best_ch.nn_initial[k].b[j] = ch[0].nn_initial[k].b[j];
					}
				}
				GA_best_ch.A = ch[i].A;
				GA_best_ch.B = ch[i].B;
				GA_best_ch.C = ch[i].C;
				GA_best_ch.D = ch[i].D;
			}

		}
		sprintf(fileName, "NN/g%d/GA_best_ch.txt", g);
		a_generation_ch[NUM_CHROMO] = fopen(fileName, "a");
		if (a_generation_ch[NUM_CHROMO] == NULL)
		{
			printf("\n Error: Cannot open input file for writing \n");
		}
		for ( k = 0; k < DIMENSION; k++)
		{
			fprintf(a_generation_ch[NUM_CHROMO], "The %d dimension\n",k+1);

			for (j = 0; j < SINGLE_WEIGHT; j++)
			{
				fprintf(a_generation_ch[NUM_CHROMO], "%lf\n", GA_best_ch.nn_initial[k].w[j]);
			}
			for (j = 0; j < SINGLE_WEIGHT; j++)
			{
				fprintf(a_generation_ch[NUM_CHROMO], "%lf\n", GA_best_ch.nn_initial[k].b[j]);
			}
			fprintf(a_generation_ch[NUM_CHROMO], "A:%lf\n B:%lf\n C:%lf\n D:%lf\n", GA_best_ch.A, GA_best_ch.B, GA_best_ch.C, GA_best_ch.D);
		}
		
		printf("the generation %d min ranking is:%lf \n", g + 1, min_fit[g]);


		if (min_fit[g] < the_min_fit_inallG)
		{
			the_min_fit_inallG = min_fit[g];
			for (k = 0; k < DIMENSION; k++)
			{
				fprintf(f_temp_ch, "The %d dimension \n", k+1);
				for (j = 0; j < SINGLE_WEIGHT; j++)
				{
					gbest_ch.nn_initial[k].w[j] = GA_best_ch.nn_initial[k].w[j];
					fprintf(f_temp_ch, "%lf\n", gbest_ch.nn_initial[k].w[j]);
				}
				for (j = 0; j < SINGLE_WEIGHT; j++)
				{
					gbest_ch.nn_initial[k].b[j] = GA_best_ch.nn_initial[k].b[j];
					fprintf(f_temp_ch, "%lf\n", gbest_ch.nn_initial[k].b[j]);
				}

			}
			gbest_ch.A = GA_best_ch.A;
			gbest_ch.B = GA_best_ch.B;
			gbest_ch.C = GA_best_ch.C;
			gbest_ch.D = GA_best_ch.D;
			fprintf(f_temp_ch, "A:%lf\n B:%lf\n C:%lf\n D:%lf\n", gbest_ch.A, gbest_ch.B, gbest_ch.C, gbest_ch.D);
			record_g = g;
		}
		printf("the history min ranking is:%lf \n", the_min_fit_inallG);
		fprintf(fp, "g=%d,the best:%lf\n", g + 1, min_fit[g]);
		fprintf(fp, "history best %d:%lf\n", record_g, the_min_fit_inallG);
		selection_tournment(ch, GA_fitness, g);
		crossover(ch);
		mutation(ch);
		//record the undated NN in this generation's NN
		for (i = 0; i < NUM_CHROMO; i++)
		{
			sprintf(fileName, "NN/g%d/ch_%d.txt", g, i);
			a_generation_ch[i] = fopen(fileName, "a");
			if (a_generation_ch[i] == NULL)
			{
				printf("\n Error: Cannot open input file for writing \n");
			}
			for (k = 0; k < DIMENSION; k++)
			{
				fprintf(a_generation_ch[i], "The %d dimension\n", k + 1);

				for (j = 0; j < SINGLE_WEIGHT; j++)
				{
					fprintf(a_generation_ch[i], "%lf\n", ch[i].nn_initial[k].w[j]);
				}
				for (j = 0; j < SINGLE_WEIGHT; j++)
				{
					fprintf(a_generation_ch[i], "%lf\n", ch[i].nn_initial[k].b[j]);
				}
				fprintf(a_generation_ch[i], "A:%lf\n B:%lf\n C:%lf\n D:%lf\n", ch[i].A, ch[i].B, ch[i].C, ch[i].D);
			}
		}
		fprintf(f_temp_result, "g=%d,the best:%lf\n", g + 1, min_fit[g]);
		fprintf(f_temp_result, "history best %d:%lf\n", record_g, the_min_fit_inallG);
		fclose(f_temp_ch);
		fclose(f_temp_result);

		for (i = 0; i < NUM_CHROMO + 1; i++)
		{
			fclose(a_generation_ch[i]);
		}


	}//GA代
	for (k = 0; k < DIMENSION; k++)
	{
		fprintf(fw, "GA totally %d, The %d dimension \n", EPOCH, k + 1);
		for (j = 0; j < SINGLE_WEIGHT; j++)
		{
			gbest_ch.nn_initial[k].w[j] = GA_best_ch.nn_initial[k].w[j];
			fprintf(fw, "%lf\n", gbest_ch.nn_initial[k].w[j]);
		}
		for (j = 0; j < SINGLE_WEIGHT; j++)
		{
			gbest_ch.nn_initial[k].b[j] = GA_best_ch.nn_initial[k].b[j];
			fprintf(fw, "%lf\n", gbest_ch.nn_initial[k].b[j]);
		}
	}
	fprintf(fw, "A:%lf\n B:%lf\n C:%lf\n D:%lf\n", gbest_ch.A, gbest_ch.B, gbest_ch.C, gbest_ch.D);
	fclose(fp);
	fclose(fw);
    return 0;
}

